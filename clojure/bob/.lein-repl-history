(reduce or [false true false false])
(reduce + [false true false false])
(reduce or [false true false false])
(or false true)
(reduce or '(false true false false))
(def alphabet "abcdefghijklmnopqrstuvwxyz")
(defn is-letter? [c] clojure.string/includes? alphabet c)
(is-letter? "a")
(is-letter? "ab")
(defn is-letter? [c] (clojure.string/includes? alphabet c))
(is-letter? "ab")
(is-letter? "a")
(is-letter? "1")
(is-letter? "12")
(is-letter? "13")
(is-letter? "af")
(clojure.string/char? "13")
(clojure.string/char? "1")
(char? "1")
(char? "1v")
(every? is-letter? "romulo")
(is-letter? "af")
(is-letter? "a")
(is-letter? "b")
(every? is-letter? "romulo")
(is-letter? "a")
(some is-letter? "romulo")
(some char? "romulo")
(some char? "romulo1234")
(some char? "1234")
(some char? "")
(some char? "4")
(some char? "")
(map is-letter? "romulo 34")
(first "romulo")
(last "romulo")
(clojure.string/split "romulo")
(clojure.string/split "" "romulo")
(char? "r")
(char? "rl")
(char? "rlc")
(char? "rlcv")
(char? "rlcvb")
(clojure.string/split "romulo" #"")
(map is-letter? (clojure.string/split "romulo" #""))
(every? false? (map is-letter? (clojure.string/split "romulo" #"")))
(every? false? (map is-letter? (clojure.string/split "bla 123" #"")))
(every? false? (map is-letter? (clojure.string/split "123" #"")))
(every? false? (map is-letter? (clojure.string/split "1, 2, 3" #"")))
(every? false? (map is-letter? (clojure.string/split "1, 2, 3?" #"")))
quit
(def alphabet "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
(map (fn [s] (clojure.string/includes? alphabet s)) "Romulo R$ 3.052!")
(map (fn [s] (clojure.string/includes? s alphabet)) "Romulo R$ 3.052!")
(map (fn [s] (when (clojure.string/includes? s alphabet) s)) "Romulo R$ 3.052!")
(map (fn [s] (println s)) "Romulo R$ 3.052!")
(map (fn [s] (when (clojure.string/includes? alphabet s) s)) "Romulo R$ 3.052!")
(clojure.string/includes? alphabet "z")
(clojure.string/includes? alphabet "b")
(clojure.string/includes? alphabet \b)
(map (fn [s] (when (clojure.string/includes? alphabet (str s)) s)) "Romulo R$ 3.052!")
(map (fn [s] (when (clojure.string/includes? alphabet (str s)) (str s))) "Romulo R$ 3.052!")
(remove  nil? (map (fn [s] (when (clojure.string/includes? alphabet (str s)) (str s))) "Romulo R$ 3.052!"))
(join (remove  nil? (map (fn [s] (when (clojure.string/includes? alphabet (str s)) (str s))) "Romulo R$ 3.052!")))
(clojure.string/join (remove  nil? (map (fn [s] (when (clojure.string/includes? alphabet (str s)) (str s))) "Romulo R$ 3.052!")))
(clojure.string/join (remove  nil? (map (fn [s] (when (clojure.string/includes? alphabet (str s)) (str s))) "$ 3.052!")))
(empty? "")
(not-empty? "")
(not (empty? ""))
(not (empty? "b"))
(seq "b")
(seq "")
(clojure.string/trim "        bla         ")
(clojure.string/trim "        bla        rom ")
(remove "\t" "Romulo\t")
(remove "t" "Romulot")
